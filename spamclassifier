import pandas as pd
import numpy as np
import pickle
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer #For stemming
from nltk.stem import WordNetLemmatizer #For Lemmetization
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import pickle

import nltk
import string
import re
from nltk.tokenize import word_tokenize
from nltk.stem.porter import PorterStemmer
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
stop_words = set(stopwords.words('english'))
punc = '''!()0123456789-'[]{};:'"\,<>./?@#$%^&*_~'''
ps = PorterStemmer()
def transform_text(text):
    text = text.lower()
    text = nltk.word_tokenize(text)
    
    y = []
    for i in text:
        if i.isalnum():
            y.append(i)
    
    text = y[:]
    y.clear()
    
    for i in text:
        if i not in stopwords.words('english') and i not in string.punctuation:
            y.append(i)
            
    text = y[:]
    y.clear()
    
    for i in text:
        y.append(ps.stem(i))
    
            
    return " ".join(y)

df = pd.read_csv("spam.csv",encoding="latin-1")
"""Model Building"""

df.drop(columns = ['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], inplace = True)
df.rename(columns = {"v1":"label", "v2":"message"}, inplace = True)

df['label'] = df['label'].map({'ham': 0, 'spam': 1})
df['clear_msg'] = df['message'].apply(transform_text)

data=df.drop("message",axis=1)
print(data[:6])
from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer
cv = CountVectorizer()
tfidf = TfidfVectorizer(max_features=3000)
X = tfidf.fit_transform(data['clear_msg']).toarray()

#Save the Count Vector as tranform.pkl file 
#which will be used to convert text into count vector




#Save the vocabulary in form of words
words = tfidf.get_feature_names()
pickle.dump(words,open('vocabulary.pkl','wb'))


# x_train=tfidf.fit_transform(data['clear_msg']).toarray()

y=data['label'].values
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=2)

from sklearn.naive_bayes import GaussianNB,MultinomialNB,BernoulliNB
from sklearn.metrics import accuracy_score,confusion_matrix,precision_score
gnb = GaussianNB()
mnb = MultinomialNB()
bnb = BernoulliNB()
gnb.fit(X_train,y_train)
y_pred1 = gnb.predict(X_test)
print(accuracy_score(y_test,y_pred1))
print(confusion_matrix(y_test,y_pred1))
print(precision_score(y_test,y_pred1))

mnb.fit(X_train,y_train)
y_pred2 = mnb.predict(X_test)
print(accuracy_score(y_test,y_pred2))
print(confusion_matrix(y_test,y_pred2))
print(precision_score(y_test,y_pred2))

bnb.fit(X_train,y_train)
y_pred3 = bnb.predict(X_test)
print(accuracy_score(y_test,y_pred3))
print(confusion_matrix(y_test,y_pred3))
print(precision_score(y_test,y_pred3))

import pickle
pickle.dump(tfidf,open('vector.pkl','wb'))
pickle.dump(mnb,open('f_model.pkl','wb'))
text="free entri 2 wkli comp win fa cup final tkt "
trans=transform_text(text)
vector_input=tfidf.transform([trans]).toarray()
print(vector_input)
result = mnb.predict(vector_input)[0]
if result == 1:
  print("Spam")
else:
  print("Not Spam")
